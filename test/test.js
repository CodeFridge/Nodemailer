// Generated by CoffeeScript 1.3.3
var HOST, PORT, SECURE, async, createServer, net, nodemailer, oauthConfig, smtpSettings, transport, util;

util = require('util');

net = require('net');

nodemailer = require('../lib/nodemailer');

async = require('async');

PORT = 11998;

HOST = 'localhost';

SECURE = false;

oauthConfig = {
  user: 'VALID_EMAIL',
  client_id: 'VALID_CLIENT_ID',
  client_secret: 'VALID_CLIENT_SECRET',
  refresh_token: 'VALID_REFRESH_TOKEN',
  access_token: 'VALID_ACCESS_TOKEN'
};

smtpSettings = {
  auth: {
    XOAuth2: {
      user: oauthConfig.user,
      clientId: oauthConfig.client_id,
      clientSecret: oauthConfig.client_secret,
      refreshToken: oauthConfig.refresh_token,
      accessToken: oauthConfig.access_token
    }
  },
  host: HOST,
  secureConnection: SECURE,
  port: PORT
};

createServer = function() {
  var fakeServer;
  fakeServer = net.createServer().listen(PORT);
  return fakeServer.once('connection', function(socket) {
    console.log("Got connection");
    return async.series([
      function(next) {
        socket.write("220 mx.google.com ESMTP ys4sm54949678pbb.9 - gsmtp\r\n");
        return setTimeout(next, 100);
      }, function(next) {
        socket.write("250-mx.google.com at your service, [205.189.0.33]\r\n250-SIZE 35882577\r\n250-8BITMIME\r\n250-AUTH LOGIN PLAIN XOAUTH XOAUTH2\r\n250-ENHANCEDSTATUSCODES\r\n250 PIPELINING\r\n");
        return setTimeout(next, 1000);
      }, function(next) {
        socket.write("334 eyJzdGF0dXMiOiI0MDAiLCJzY2hlbWVzIjoiQmVhcmVyIiwic2NvcGUiOiJodHRwczovL21haWwuZ29vZ2xlLmNvbS8ifQ==\r\n");
        return setTimeout(next, 100);
      }, function(next) {
        socket.write("535-5.7.8 Username and Password not accepted. Learn more at\r\n535 5.7.8 http://support.google.com/mail/bin/answer.py?answer=14257 fa5sm14061508pbb.3 - gsmtp\r\n");
        return setTimeout(next, 100);
      }, function(next) {
        socket.end("454 4.7.0 Too many login attempts, please try again later. a8sm54888477qae.11 - gsmtp\r\n");
        return setTimeout(next, 100);
      }
    ], function() {
      return console.log(util.inspect(arguments));
    });
  });
};

if (require.main === module) {
  createServer();
  transport = nodemailer.createTransport("SMTP", smtpSettings);
  transport.sendMail({}, function(err, results) {
    return console.log(util.inspect(arguments));
  });
}
